//
//  ArticlesViewController.swift
//  VIP Project
//
//  Created by Victor on 21/08/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher

protocol ArticlesDisplayLogic: class {
    func displayArticles(viewModel: Articles.List.ViewModel)
    func displayArticles(viewModel: Articles.Search.ViewModel)
    func displaySelectedArticle()
}

class ArticlesViewController: UIViewController, UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate, ArticlesDisplayLogic {
    
    @IBOutlet weak var searchBar: UISearchBar!
    @IBOutlet weak var tableView: UITableView!
    
    var interactor: ArticlesBusinessLogic?
    var router: (NSObjectProtocol & ArticlesRoutingLogic & ArticlesDataPassing)?
    
    var articles: [Article]?
    
    //MARK: - Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    //MARK: - Setup
    
    private func setup() {
        let viewController = self
        let interactor = ArticlesInteractor()
        let presenter = ArticlesPresenter()
        let router = ArticlesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    //MARK: - Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    //MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        view.backgroundColor = Colors.myLightGray
        searchBar.barTintColor = Colors.myLightGray
        tableView.backgroundColor = Colors.myLightGray
        
        tableView.register(ArticleTableViewCell.nib(), forCellReuseIdentifier: ArticleTableViewCell.identifier)
        
        searchBar.delegate = self
        tableView.delegate = self
        tableView.dataSource = self
        
        tableView.tableFooterView = UIView()
        tableView.separatorColor = .clear
        
        searchBar.searchBarStyle = .minimal
    
        loadArticles()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        self.searchBar.searchTextField.resignFirstResponder()
    }
    
    //MARK: - Requests
    
    func loadArticles() {
        interactor?.loadArticles()
    }
    
    func selectArticle(request: Articles.SelectedArticle.Request) {
        interactor?.selectArticle(request: request)
    }
    
    func searchArticle(request: Articles.Search.Request) {
        interactor?.searchArticle(request: request)
    }
    
    //MARK: - Displays
    
    func displayArticles(viewModel: Articles.List.ViewModel) {
        self.articles = viewModel.articles
        tableView.reloadData()
    }
    
    func displayArticles(viewModel: Articles.Search.ViewModel) {
        self.articles = viewModel.articles
        tableView.reloadData()
    }
    
    func displaySelectedArticle() {
        router?.routeToArticleDetails()
    }
    
    //MARK: - Search
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        searchArticle(request: Articles.Search.Request(text: searchText))
    }
    
    //MARK: - Table View
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return articles?.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let cell = tableView.dequeueReusableCell(withIdentifier: ArticleTableViewCell.identifier) as? ArticleTableViewCell {
            let url = URL(string: articles?[indexPath.row].urlToImage ?? "")
            let processor = DownsamplingImageProcessor(size: cell.iconImageView.bounds.size)
            cell.iconImageView.kf.indicatorType = .activity
            cell.iconImageView.kf.setImage(
                with: url,
                placeholder: UIImage(named: "placeholderImage"),
                options: [
                    .processor(processor),
                    .scaleFactor(UIScreen.main.scale),
                    .transition(.fade(1)),
                    .cacheOriginalImage
                ])
            cell.iconImageView.layer.cornerRadius = 5
            cell.iconImageView.layer.masksToBounds = true
            cell.titleLabel.text = articles?[indexPath.row].title
            return cell
        }
        return UITableViewCell()
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        selectArticle(request: Articles.SelectedArticle.Request(index: indexPath.row))
    }
}
