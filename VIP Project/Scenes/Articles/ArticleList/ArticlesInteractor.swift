//
//  ArticlesInteractor.swift
//  VIP Project
//
//  Created by Victor on 21/08/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ArticlesBusinessLogic {
    func loadArticles()
    func selectArticle(request: Articles.SelectedArticle.Request)
    func searchArticle(request: Articles.Search.Request)
}

protocol ArticlesDataStore {
    var selectedArticle: Article! { get set }
}

class ArticlesInteractor: ArticlesBusinessLogic, ArticlesDataStore {
    
    var presenter: ArticlesPresentationLogic?
    var worker: ArticlesWorker?
    
    var articles: [Article]?
    var filteredArticles: [Article]?
    var selectedArticle: Article!
    
    //MARK: - Responses
    
    func loadArticles() {
        worker = ArticlesWorker()
        worker?.getHousesList(callback: { (articles, error) in
            let response = Articles.List.Response(articles: articles, error: error)
            self.articles = articles
            self.presenter?.presentArticles(response: response)
        })
    }
    
    func selectArticle(request: Articles.SelectedArticle.Request) {
        guard let articles = articles, request.index < articles.count else {
            return
        }
        
        selectedArticle = articles[request.index]
        presenter?.presentSelectedArticle()
    }
    
    func searchArticle(request: Articles.Search.Request) {
        if request.text == "" {
            filteredArticles = articles
        } else {
            filteredArticles = articles?.filter({ (article) -> Bool in
                return (article.title?.lowercased().contains((request.text?.lowercased())!))!
            })
        }
        
        presenter?.presentFilteredArticles(response: Articles.Search.Response(articles: filteredArticles))
    }
}
